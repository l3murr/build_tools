#!/bin/sh
set -eu

check_minikube_install() {
    if [[ $(minikube 2>/dev/null)  =~ "minikube provisions and manages local Kubernetes" ]]; then
        return;
    fi
    echo "You must have minikube installed first"
    exit 0
}

check_minikube_running() {
    if [[ $(minikube status 2>/dev/null)  =~ "host: Running" ]]; then
        return;
    fi
    minikube start --listen-address=0.0.0.0 --embed-certs
}

main() {
    if [[ $# -gt 0 ]]; then
        profile=$1
    else
        profile="1"
    fi
    if [[ $# -gt 1 ]]; then
        host=$2
    else
        host="tmnp.net"
    fi
    if [[ $profile == "1" ]]; then
        app_port=8443
    fi
    if [[ $profile == "2" ]]; then
        app_port=8844
    fi
    if [[ $profile == "3" ]]; then
        app_port=8845
    fi
    if [[ $profile == "4" ]]; then
        app_port=8846
    fi
    check_minikube_install
    check_minikube_running
    minikube ssh "curl --silent https://raw.githubusercontent.com/l3murr/build_tools/refs/heads/main/dev-nginx-nip.Dockerfile | docker build -t tms-nginx:v2 -"
    minikube ssh "curl --silent https://raw.githubusercontent.com/l3murr/build_tools/refs/heads/main/dev-server.Dockerfile | docker build -t tms-server:v2 -"
    minikube ssh "curl --silent https://raw.githubusercontent.com/l3murr/build_tools/refs/heads/main/dev-mysql.Dockerfile | docker build -t tms-mysql:v2 -"
    minikube ssh "curl --silent https://raw.githubusercontent.com/l3murr/build_tools/refs/heads/main/dev-websocket.Dockerfile | docker build -t tms-websocket:v2 -"
    minikube ssh "curl --silent https://raw.githubusercontent.com/l3murr/build_tools/refs/heads/main/dev-dynamodb.Dockerfile | docker build -t tms-dynamodb:v2 -"
    minikube ssh "curl --silent https://raw.githubusercontent.com/l3murr/build_tools/refs/heads/main/dev-minio.Dockerfile | docker build -t tms-minio:v2 -"
    curl --silent https://raw.githubusercontent.com/l3murr/build_tools/refs/heads/main/kube.dev.yaml | sed "s/\\$\\$/$profile/g" | sed "s/\\^\\^/$host/g" | sed "s/\\*\\*/$app_port/g" | minikube kubectl apply -- -f -

    # Setup MinIO bucket
    echo "Setting up MinIO bucket for profile $profile..."

    # Wait for MinIO pod to be ready
    if minikube kubectl -- wait --for=condition=ready pod -l name=minio-$profile --timeout=120s; then
        echo "MinIO pod is ready, waiting for service..."
        sleep 5

        # Get MinIO connection details with timeout
        minio_ip=$(minikube ip)
        echo "MinIO IP: $minio_ip"

        minio_port=$(timeout 10 minikube kubectl -- get service minio-service-$profile -o jsonpath='{.spec.ports[0].nodePort}' 2>/dev/null || echo "")
        echo "MinIO API Port: $minio_port"

        if [[ -n "$minio_port" && "$minio_port" != "" ]]; then
            minio_endpoint="http://$minio_ip:$minio_port"
            echo "Testing MinIO endpoint: $minio_endpoint"

            # Wait for MinIO to be accessible (up to 30 seconds)
            for i in {1..6}; do
                echo "Attempt $i/6: Testing MinIO connectivity..."
                if timeout 10 curl -s -f "$minio_endpoint/minio/health/live" >/dev/null 2>&1; then
                    echo "MinIO is responding!"
                    break
                fi
                if [[ $i -eq 6 ]]; then
                    echo "⚠️  MinIO not responding after 30 seconds, skipping bucket setup"
                    echo "MinIO Console: http://$minio_ip:$(minikube kubectl -- get service minio-service-$profile -o jsonpath='{.spec.ports[1].nodePort}' 2>/dev/null)"
                    echo "You can create the bucket manually later with: ./setup-minio.sh create-bucket $profile"
                    break
                fi
                sleep 5
            done

            # Only try bucket operations if MinIO is responding
            if timeout 10 curl -s -f "$minio_endpoint/minio/health/live" >/dev/null 2>&1; then
                echo "Creating/checking S3 bucket 'hl7-rules-dev'..."
                bucket_exists=$(timeout 10 curl -s -o /dev/null -w "%{http_code}" "$minio_endpoint/hl7-rules-dev" --user "minioadmin:minioadmin" 2>/dev/null || echo "000")

                if [[ "$bucket_exists" != "200" ]]; then
                    echo "Creating S3 bucket..."
                    if timeout 10 curl -X PUT "$minio_endpoint/hl7-rules-dev" --user "minioadmin:minioadmin" -H "Content-Length: 0" >/dev/null 2>&1; then
                        echo "✅ MinIO bucket 'hl7-rules-dev' created successfully"
                    else
                        echo "⚠️  MinIO bucket creation failed"
                    fi
                else
                    echo "✅ MinIO bucket 'hl7-rules-dev' already exists"
                fi

                echo "MinIO Console: http://$minio_ip:$(minikube kubectl -- get service minio-service-$profile -o jsonpath='{.spec.ports[1].nodePort}' 2>/dev/null)"
                echo "MinIO API: $minio_endpoint"
                echo "Credentials: minioadmin / minioadmin"
            fi
        else
            echo "⚠️  Could not get MinIO NodePort, bucket setup skipped"
        fi
    else
        echo "⚠️  MinIO pod failed to become ready, bucket setup skipped"
    fi

    keys=($(ls ~/.ssh))
    SSH_REGEX='^id_[a-zA-Z0-9]*'
    PK_REGEX='^id_[a-zA-Z0-9]*$'
    for i in "${keys[@]}"; do
        if [[ "$i" =~ $SSH_REGEX ]]; then
            minikube cp "$HOME/.ssh/$i" "minikube:/data/home/.ssh/$i"
        fi
        if [[ "$i" =~ $PK_REGEX ]]; then
            minikube ssh "sudo chmod 400 /data/home/.ssh/$i"
        fi
    done
    nginx=$(minikube kubectl get pods | grep -o 'nginx-[0-9a-z-]*')
    mysql=$(minikube kubectl get pods | grep -o "mysql-$profile-[0-9a-z-]*")
    minikube ssh "sudo chmod 0777 -R /data/nosql_1"
}

main "$@"
